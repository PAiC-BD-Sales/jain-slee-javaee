<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="design_overview">

	<title>Design Overview</title>

	<para>The &THIS.EXAMPLE;
		Example is composed by two parts: a JMX Bean to be registered by SleeConnectivity extension in a WildFly 10 instance, the Java EE application which will be used to fire JAIN SLEE event to the JAIN SLEE container; and a JAIN SLEE application, to be deployed in the JAIN SLEE container, which will handle the events fired, printing information about it in the container's console.
	</para>
	
	<section id="design_overview_sbb">
		<title>Design Overview: SLEE Service</title>
		<para>
			<acronym>JAIN SLEE</acronym>
			service is simplest of all. It performs very basic actions when handling each received event:
		</para>
		<itemizedlist>
			<listitem>
				<para>detach from activity where the event was fired, this will allow the container to end it implicitly, since it becomes unreferenced.</para>
			</listitem>
			<listitem>
				<para>log the message contained in the event, which can be seen in the container's console.</para>
			</listitem>
		</itemizedlist>
	</section>
	<section id="design_overview_jmx">
		<title>Design Overview: JMX Bean</title>
		<para>
			<acronym>JMX</acronym>
			Client fires events into
			<acronym>JAIN SLEE</acronym>
			container, using the standard SLEEConnection API.
		</para>
		<para>
			There are two possible scenarios of
			client and server deployment:
		</para>
		<variablelist>
			<varlistentry>
				<term>colocated</term>
				<listitem>
					<para>
						<acronym>JMX</acronym> Bean and	<acronym>JAIN SLEE</acronym> run in the same
						<acronym>JVM</acronym>. In this case both parts are deployed in same WildFly server.
					</para>
					<mediaobject>
						<imageobject>
							<imagedata
								width="300px"
								align="center"
								fileref="images/design1.png"
								format="PNG"/>
						</imageobject>
						<caption>
							<para>Container class sharing</para>
						</caption>
					</mediaobject>
				</listitem>
				
			</varlistentry>
			<varlistentry>
				<term>separate</term>
				<listitem>
					<para>
						In this case <acronym>JMX</acronym> Client and <acronym>JSLEE</acronym> container run in different <acronym>JVM</acronym>s.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>Diagram below depicts how <acronym>JMX</acronym> Client fires event into <acronym>JSLEE</acronym>: </para>
		<mediaobject>
			<imageobject>
				<imagedata	width="300px"	align="center"	fileref="images/design2.png"	format="PNG"/>
			</imageobject>
			<caption>
				<para>Container class sharing</para>
			</caption>
		</mediaobject>
	</section>

</chapter>

